# This file is for storage of incomplete methods that do not currently work.

class GateNInNOut(GateLabel):
    def __init__(self, master, impath, numInputs=0, numOutputs=0, **kwargs):
        # Get buckets dialog
        if numInputs==0 and numOutputs==0:
            prompts = []
            prompts.append("Number of inputs:")
            prompts.append("Number of outputs:")
            dialog = CustomDialog(master, title="Choose number of in/outputs", prompts=prompts)
            master.wait_window(dialog)
            if dialog.result:
                numInputs = int(dialog.result[0])
                numOutputs = int(dialog.result[1])
            else:
                return
        prompts = []
        prompts.append("name")
        for inp in range(numInputs):
            prompts.append("Input " + str(inp))
        for out in range(numOutputs):
            prompts.append("Output " + str(out))
        dialog = CustomDialog(master, title="Gate Buckets", prompts=prompts)
        master.wait_window(dialog)
        if dialog.result:
            # The user clicked OK
            name_text = dialog.result[0]
            inputs_text = dialog.result[1:1 + numInputs]
            outputs_text = dialog.result[1+numOutputs:]
        else:
            return

            # init image widget label
        super().__init__(master, impath=impath, kwargs=kwargs)
        self.make_labels(master, name_text, inputs_text, outputs_text)

    def make_labels(self, master, name_text, inputs_text, outputs_text):
        # Create the text labels
        self.name_label = tk.Label(master, text=name_text)
        self.in_labels = []
        self.out_labels = []
        for inp in inputs_text:
            self.in_labels.append(tk.Label(master, text=inp))
        for out in outputs_text:
            self.out_labels.append(tk.Label(master, text=out))
        self.interface_buckets = [*self.in_labels["text"], ]
        self.interface_buckets = [(self.in1_label["text"], "ON"), (self.in2_label["text"], "ON"), (self.out_label["text"], "EMPTY")]


    def add_to_panel(self):
        # Add the image label widget to the canvas
        self.id = self.master.create_window((30, 25), window=self, anchor="nw")

        # Add the text label widgets to the canvas
        self.name_id = self.master.create_window((70, 5), window=self.name_label, anchor="nw")
        for i, label in self.in_labels:
            self.in_id[i] = self.master.create_window((5, 35*i), window=label, anchor="nw")
        for i, label in self.out_labels:
            self.out_id[i] = self.master.create_window((160, 35*i), window=self.label, anchor="nw")

    def on_drag_motion(self, delta_x, delta_y):
        for label in [self.id, self.name_id, *self.in_id, *self.out_id]:
            self.master.move(label, delta_x, delta_y)

    def destroy_all_labels(self):
        self.name_label.destroy()
        self.in1_label.destroy()
        self.in2_label.destroy()
        self.out_label.destroy()

    def get_ports_string(self):
        return "input1=" + self.in1_label["text"] + ", input2=" + self.in2_label["text"] + ", output=" + self.out_label[
            "text"]

class BlackBoxDB(GateNInNOut):
    def __init__(self, master, **kwargs):
        super().__init__(master, impath=os.path.join("graphics", "And2.JPG"), kwargs=kwargs)

    def get_type_string(self):
        return "BlackBox"
